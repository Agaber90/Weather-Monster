package mocks

import (
	"Weather-Monster/models"
	"context"

	"github.com/stretchr/testify/mock"
)

// WebhookUsecase is an autogenerated mock type for the Usecase type
type WebhookUsecase struct {
	mock.Mock
}

//CreateCreateWebhook provides a mock function with given fields: ctx, w
func (m *WebhookUsecase) CreateWebhook(ctx context.Context, tmp *models.Webhooks) error {
	ret := m.Called(ctx, tmp)
	var err error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Webhooks) error); ok {
		err = rf(ctx, tmp)
	} else {
		err = ret.Error(0)
	}

	return err
}

//GetCityByID provides a mock function with given fields: ctx, ctyID
func (m *WebhookUsecase) GetCityByID(ctx context.Context, ctyID int64) (*models.Temperatures, error) {
	ret := m.Called(ctx, ctyID)

	var err *models.Temperatures
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Temperatures); ok {
		err = rf(ctx, ctyID)
	} else {
		if ret.Get(0) != nil {
			err = ret.Get(0).(*models.Temperatures)
		}
	}

	var cerr error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		cerr = rf(ctx, ctyID)
	} else {
		cerr = ret.Error(1)
	}

	return err, cerr
}

//DeleteWebhook provides a mock function with given fields: ctx, id
func (m *WebhookUsecase) DeleteWebhook(ctx context.Context, id int64) error {
	ret := m.Called(ctx, id)

	var err error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		err = rf(ctx, id)
	} else {
		err = ret.Error(0)
	}

	return err
}
